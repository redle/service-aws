// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kv.proto.proto

#ifndef PROTOBUF_kv_2eproto_2eproto__INCLUDED
#define PROTOBUF_kv_2eproto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace kv {
namespace proto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_kv_2eproto_2eproto();
void protobuf_AssignDesc_kv_2eproto_2eproto();
void protobuf_ShutdownFile_kv_2eproto_2eproto();

class data;
class get_request;
class get_response;
class req_envelope;
class set_request;
class set_response;

enum set_response_error_t {
  set_response_error_t_ok = 1,
  set_response_error_t_internal = 2
};
bool set_response_error_t_IsValid(int value);
const set_response_error_t set_response_error_t_error_t_MIN = set_response_error_t_ok;
const set_response_error_t set_response_error_t_error_t_MAX = set_response_error_t_internal;
const int set_response_error_t_error_t_ARRAYSIZE = set_response_error_t_error_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* set_response_error_t_descriptor();
inline const ::std::string& set_response_error_t_Name(set_response_error_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    set_response_error_t_descriptor(), value);
}
inline bool set_response_error_t_Parse(
    const ::std::string& name, set_response_error_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<set_response_error_t>(
    set_response_error_t_descriptor(), name, value);
}
enum get_response_error_t {
  get_response_error_t_ok = 1,
  get_response_error_t_not_found = 2,
  get_response_error_t_internal = 3
};
bool get_response_error_t_IsValid(int value);
const get_response_error_t get_response_error_t_error_t_MIN = get_response_error_t_ok;
const get_response_error_t get_response_error_t_error_t_MAX = get_response_error_t_internal;
const int get_response_error_t_error_t_ARRAYSIZE = get_response_error_t_error_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* get_response_error_t_descriptor();
inline const ::std::string& get_response_error_t_Name(get_response_error_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    get_response_error_t_descriptor(), value);
}
inline bool get_response_error_t_Parse(
    const ::std::string& name, get_response_error_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<get_response_error_t>(
    get_response_error_t_descriptor(), name, value);
}
enum req_envelope_msg_type {
  req_envelope_msg_type_set_request_t = 1,
  req_envelope_msg_type_set_response_t = 2,
  req_envelope_msg_type_get_request_t = 3,
  req_envelope_msg_type_get_response_t = 4
};
bool req_envelope_msg_type_IsValid(int value);
const req_envelope_msg_type req_envelope_msg_type_msg_type_MIN = req_envelope_msg_type_set_request_t;
const req_envelope_msg_type req_envelope_msg_type_msg_type_MAX = req_envelope_msg_type_get_response_t;
const int req_envelope_msg_type_msg_type_ARRAYSIZE = req_envelope_msg_type_msg_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* req_envelope_msg_type_descriptor();
inline const ::std::string& req_envelope_msg_type_Name(req_envelope_msg_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    req_envelope_msg_type_descriptor(), value);
}
inline bool req_envelope_msg_type_Parse(
    const ::std::string& name, req_envelope_msg_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<req_envelope_msg_type>(
    req_envelope_msg_type_descriptor(), name, value);
}
// ===================================================================

class data : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kv.proto.data) */ {
 public:
  data();
  virtual ~data();

  data(const data& from);

  inline data& operator=(const data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const data& default_instance();

  void Swap(data* other);

  // implements Message ----------------------------------------------

  inline data* New() const { return New(NULL); }

  data* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const data& from);
  void MergeFrom(const data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(data* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // required string value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:kv.proto.data)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  friend void  protobuf_AddDesc_kv_2eproto_2eproto();
  friend void protobuf_AssignDesc_kv_2eproto_2eproto();
  friend void protobuf_ShutdownFile_kv_2eproto_2eproto();

  void InitAsDefaultInstance();
  static data* default_instance_;
};
// -------------------------------------------------------------------

class set_request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kv.proto.set_request) */ {
 public:
  set_request();
  virtual ~set_request();

  set_request(const set_request& from);

  inline set_request& operator=(const set_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const set_request& default_instance();

  void Swap(set_request* other);

  // implements Message ----------------------------------------------

  inline set_request* New() const { return New(NULL); }

  set_request* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const set_request& from);
  void MergeFrom(const set_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(set_request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .kv.proto.data req = 1;
  bool has_req() const;
  void clear_req();
  static const int kReqFieldNumber = 1;
  const ::kv::proto::data& req() const;
  ::kv::proto::data* mutable_req();
  ::kv::proto::data* release_req();
  void set_allocated_req(::kv::proto::data* req);

  // @@protoc_insertion_point(class_scope:kv.proto.set_request)
 private:
  inline void set_has_req();
  inline void clear_has_req();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::kv::proto::data* req_;
  friend void  protobuf_AddDesc_kv_2eproto_2eproto();
  friend void protobuf_AssignDesc_kv_2eproto_2eproto();
  friend void protobuf_ShutdownFile_kv_2eproto_2eproto();

  void InitAsDefaultInstance();
  static set_request* default_instance_;
};
// -------------------------------------------------------------------

class set_response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kv.proto.set_response) */ {
 public:
  set_response();
  virtual ~set_response();

  set_response(const set_response& from);

  inline set_response& operator=(const set_response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const set_response& default_instance();

  void Swap(set_response* other);

  // implements Message ----------------------------------------------

  inline set_response* New() const { return New(NULL); }

  set_response* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const set_response& from);
  void MergeFrom(const set_response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(set_response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef set_response_error_t error_t;
  static const error_t ok =
    set_response_error_t_ok;
  static const error_t internal =
    set_response_error_t_internal;
  static inline bool error_t_IsValid(int value) {
    return set_response_error_t_IsValid(value);
  }
  static const error_t error_t_MIN =
    set_response_error_t_error_t_MIN;
  static const error_t error_t_MAX =
    set_response_error_t_error_t_MAX;
  static const int error_t_ARRAYSIZE =
    set_response_error_t_error_t_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  error_t_descriptor() {
    return set_response_error_t_descriptor();
  }
  static inline const ::std::string& error_t_Name(error_t value) {
    return set_response_error_t_Name(value);
  }
  static inline bool error_t_Parse(const ::std::string& name,
      error_t* value) {
    return set_response_error_t_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .kv.proto.set_response.error_t error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  ::kv::proto::set_response_error_t error() const;
  void set_error(::kv::proto::set_response_error_t value);

  // @@protoc_insertion_point(class_scope:kv.proto.set_response)
 private:
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int error_;
  friend void  protobuf_AddDesc_kv_2eproto_2eproto();
  friend void protobuf_AssignDesc_kv_2eproto_2eproto();
  friend void protobuf_ShutdownFile_kv_2eproto_2eproto();

  void InitAsDefaultInstance();
  static set_response* default_instance_;
};
// -------------------------------------------------------------------

class get_request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kv.proto.get_request) */ {
 public:
  get_request();
  virtual ~get_request();

  get_request(const get_request& from);

  inline get_request& operator=(const get_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const get_request& default_instance();

  void Swap(get_request* other);

  // implements Message ----------------------------------------------

  inline get_request* New() const { return New(NULL); }

  get_request* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const get_request& from);
  void MergeFrom(const get_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(get_request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:kv.proto.get_request)
 private:
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  friend void  protobuf_AddDesc_kv_2eproto_2eproto();
  friend void protobuf_AssignDesc_kv_2eproto_2eproto();
  friend void protobuf_ShutdownFile_kv_2eproto_2eproto();

  void InitAsDefaultInstance();
  static get_request* default_instance_;
};
// -------------------------------------------------------------------

class get_response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kv.proto.get_response) */ {
 public:
  get_response();
  virtual ~get_response();

  get_response(const get_response& from);

  inline get_response& operator=(const get_response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const get_response& default_instance();

  void Swap(get_response* other);

  // implements Message ----------------------------------------------

  inline get_response* New() const { return New(NULL); }

  get_response* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const get_response& from);
  void MergeFrom(const get_response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(get_response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef get_response_error_t error_t;
  static const error_t ok =
    get_response_error_t_ok;
  static const error_t not_found =
    get_response_error_t_not_found;
  static const error_t internal =
    get_response_error_t_internal;
  static inline bool error_t_IsValid(int value) {
    return get_response_error_t_IsValid(value);
  }
  static const error_t error_t_MIN =
    get_response_error_t_error_t_MIN;
  static const error_t error_t_MAX =
    get_response_error_t_error_t_MAX;
  static const int error_t_ARRAYSIZE =
    get_response_error_t_error_t_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  error_t_descriptor() {
    return get_response_error_t_descriptor();
  }
  static inline const ::std::string& error_t_Name(error_t value) {
    return get_response_error_t_Name(value);
  }
  static inline bool error_t_Parse(const ::std::string& name,
      error_t* value) {
    return get_response_error_t_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .kv.proto.get_response.error_t error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  ::kv::proto::get_response_error_t error() const;
  void set_error(::kv::proto::get_response_error_t value);

  // optional .kv.proto.data req = 2;
  bool has_req() const;
  void clear_req();
  static const int kReqFieldNumber = 2;
  const ::kv::proto::data& req() const;
  ::kv::proto::data* mutable_req();
  ::kv::proto::data* release_req();
  void set_allocated_req(::kv::proto::data* req);

  // @@protoc_insertion_point(class_scope:kv.proto.get_response)
 private:
  inline void set_has_error();
  inline void clear_has_error();
  inline void set_has_req();
  inline void clear_has_req();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::kv::proto::data* req_;
  int error_;
  friend void  protobuf_AddDesc_kv_2eproto_2eproto();
  friend void protobuf_AssignDesc_kv_2eproto_2eproto();
  friend void protobuf_ShutdownFile_kv_2eproto_2eproto();

  void InitAsDefaultInstance();
  static get_response* default_instance_;
};
// -------------------------------------------------------------------

class req_envelope : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kv.proto.req_envelope) */ {
 public:
  req_envelope();
  virtual ~req_envelope();

  req_envelope(const req_envelope& from);

  inline req_envelope& operator=(const req_envelope& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const req_envelope& default_instance();

  void Swap(req_envelope* other);

  // implements Message ----------------------------------------------

  inline req_envelope* New() const { return New(NULL); }

  req_envelope* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const req_envelope& from);
  void MergeFrom(const req_envelope& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(req_envelope* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef req_envelope_msg_type msg_type;
  static const msg_type set_request_t =
    req_envelope_msg_type_set_request_t;
  static const msg_type set_response_t =
    req_envelope_msg_type_set_response_t;
  static const msg_type get_request_t =
    req_envelope_msg_type_get_request_t;
  static const msg_type get_response_t =
    req_envelope_msg_type_get_response_t;
  static inline bool msg_type_IsValid(int value) {
    return req_envelope_msg_type_IsValid(value);
  }
  static const msg_type msg_type_MIN =
    req_envelope_msg_type_msg_type_MIN;
  static const msg_type msg_type_MAX =
    req_envelope_msg_type_msg_type_MAX;
  static const int msg_type_ARRAYSIZE =
    req_envelope_msg_type_msg_type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  msg_type_descriptor() {
    return req_envelope_msg_type_descriptor();
  }
  static inline const ::std::string& msg_type_Name(msg_type value) {
    return req_envelope_msg_type_Name(value);
  }
  static inline bool msg_type_Parse(const ::std::string& name,
      msg_type* value) {
    return req_envelope_msg_type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .kv.proto.req_envelope.msg_type type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::kv::proto::req_envelope_msg_type type() const;
  void set_type(::kv::proto::req_envelope_msg_type value);

  // optional .kv.proto.set_request set_req = 2;
  bool has_set_req() const;
  void clear_set_req();
  static const int kSetReqFieldNumber = 2;
  const ::kv::proto::set_request& set_req() const;
  ::kv::proto::set_request* mutable_set_req();
  ::kv::proto::set_request* release_set_req();
  void set_allocated_set_req(::kv::proto::set_request* set_req);

  // optional .kv.proto.set_response set_resp = 3;
  bool has_set_resp() const;
  void clear_set_resp();
  static const int kSetRespFieldNumber = 3;
  const ::kv::proto::set_response& set_resp() const;
  ::kv::proto::set_response* mutable_set_resp();
  ::kv::proto::set_response* release_set_resp();
  void set_allocated_set_resp(::kv::proto::set_response* set_resp);

  // optional .kv.proto.get_request get_req = 4;
  bool has_get_req() const;
  void clear_get_req();
  static const int kGetReqFieldNumber = 4;
  const ::kv::proto::get_request& get_req() const;
  ::kv::proto::get_request* mutable_get_req();
  ::kv::proto::get_request* release_get_req();
  void set_allocated_get_req(::kv::proto::get_request* get_req);

  // optional .kv.proto.get_response get_resp = 5;
  bool has_get_resp() const;
  void clear_get_resp();
  static const int kGetRespFieldNumber = 5;
  const ::kv::proto::get_response& get_resp() const;
  ::kv::proto::get_response* mutable_get_resp();
  ::kv::proto::get_response* release_get_resp();
  void set_allocated_get_resp(::kv::proto::get_response* get_resp);

  // @@protoc_insertion_point(class_scope:kv.proto.req_envelope)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_set_req();
  inline void clear_has_set_req();
  inline void set_has_set_resp();
  inline void clear_has_set_resp();
  inline void set_has_get_req();
  inline void clear_has_get_req();
  inline void set_has_get_resp();
  inline void clear_has_get_resp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::kv::proto::set_request* set_req_;
  ::kv::proto::set_response* set_resp_;
  ::kv::proto::get_request* get_req_;
  ::kv::proto::get_response* get_resp_;
  int type_;
  friend void  protobuf_AddDesc_kv_2eproto_2eproto();
  friend void protobuf_AssignDesc_kv_2eproto_2eproto();
  friend void protobuf_ShutdownFile_kv_2eproto_2eproto();

  void InitAsDefaultInstance();
  static req_envelope* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// data

// required string key = 1;
inline bool data::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void data::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void data::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void data::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& data::key() const {
  // @@protoc_insertion_point(field_get:kv.proto.data.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void data::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kv.proto.data.key)
}
inline void data::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kv.proto.data.key)
}
inline void data::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kv.proto.data.key)
}
inline ::std::string* data::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:kv.proto.data.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* data::release_key() {
  // @@protoc_insertion_point(field_release:kv.proto.data.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void data::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:kv.proto.data.key)
}

// required string value = 2;
inline bool data::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void data::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void data::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void data::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
inline const ::std::string& data::value() const {
  // @@protoc_insertion_point(field_get:kv.proto.data.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void data::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kv.proto.data.value)
}
inline void data::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kv.proto.data.value)
}
inline void data::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kv.proto.data.value)
}
inline ::std::string* data::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:kv.proto.data.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* data::release_value() {
  // @@protoc_insertion_point(field_release:kv.proto.data.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void data::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:kv.proto.data.value)
}

// -------------------------------------------------------------------

// set_request

// required .kv.proto.data req = 1;
inline bool set_request::has_req() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void set_request::set_has_req() {
  _has_bits_[0] |= 0x00000001u;
}
inline void set_request::clear_has_req() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void set_request::clear_req() {
  if (req_ != NULL) req_->::kv::proto::data::Clear();
  clear_has_req();
}
inline const ::kv::proto::data& set_request::req() const {
  // @@protoc_insertion_point(field_get:kv.proto.set_request.req)
  return req_ != NULL ? *req_ : *default_instance_->req_;
}
inline ::kv::proto::data* set_request::mutable_req() {
  set_has_req();
  if (req_ == NULL) {
    req_ = new ::kv::proto::data;
  }
  // @@protoc_insertion_point(field_mutable:kv.proto.set_request.req)
  return req_;
}
inline ::kv::proto::data* set_request::release_req() {
  // @@protoc_insertion_point(field_release:kv.proto.set_request.req)
  clear_has_req();
  ::kv::proto::data* temp = req_;
  req_ = NULL;
  return temp;
}
inline void set_request::set_allocated_req(::kv::proto::data* req) {
  delete req_;
  req_ = req;
  if (req) {
    set_has_req();
  } else {
    clear_has_req();
  }
  // @@protoc_insertion_point(field_set_allocated:kv.proto.set_request.req)
}

// -------------------------------------------------------------------

// set_response

// required .kv.proto.set_response.error_t error = 1;
inline bool set_response::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void set_response::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void set_response::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void set_response::clear_error() {
  error_ = 1;
  clear_has_error();
}
inline ::kv::proto::set_response_error_t set_response::error() const {
  // @@protoc_insertion_point(field_get:kv.proto.set_response.error)
  return static_cast< ::kv::proto::set_response_error_t >(error_);
}
inline void set_response::set_error(::kv::proto::set_response_error_t value) {
  assert(::kv::proto::set_response_error_t_IsValid(value));
  set_has_error();
  error_ = value;
  // @@protoc_insertion_point(field_set:kv.proto.set_response.error)
}

// -------------------------------------------------------------------

// get_request

// required string key = 1;
inline bool get_request::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void get_request::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void get_request::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void get_request::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& get_request::key() const {
  // @@protoc_insertion_point(field_get:kv.proto.get_request.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void get_request::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kv.proto.get_request.key)
}
inline void get_request::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kv.proto.get_request.key)
}
inline void get_request::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kv.proto.get_request.key)
}
inline ::std::string* get_request::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:kv.proto.get_request.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* get_request::release_key() {
  // @@protoc_insertion_point(field_release:kv.proto.get_request.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void get_request::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:kv.proto.get_request.key)
}

// -------------------------------------------------------------------

// get_response

// required .kv.proto.get_response.error_t error = 1;
inline bool get_response::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void get_response::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void get_response::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void get_response::clear_error() {
  error_ = 1;
  clear_has_error();
}
inline ::kv::proto::get_response_error_t get_response::error() const {
  // @@protoc_insertion_point(field_get:kv.proto.get_response.error)
  return static_cast< ::kv::proto::get_response_error_t >(error_);
}
inline void get_response::set_error(::kv::proto::get_response_error_t value) {
  assert(::kv::proto::get_response_error_t_IsValid(value));
  set_has_error();
  error_ = value;
  // @@protoc_insertion_point(field_set:kv.proto.get_response.error)
}

// optional .kv.proto.data req = 2;
inline bool get_response::has_req() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void get_response::set_has_req() {
  _has_bits_[0] |= 0x00000002u;
}
inline void get_response::clear_has_req() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void get_response::clear_req() {
  if (req_ != NULL) req_->::kv::proto::data::Clear();
  clear_has_req();
}
inline const ::kv::proto::data& get_response::req() const {
  // @@protoc_insertion_point(field_get:kv.proto.get_response.req)
  return req_ != NULL ? *req_ : *default_instance_->req_;
}
inline ::kv::proto::data* get_response::mutable_req() {
  set_has_req();
  if (req_ == NULL) {
    req_ = new ::kv::proto::data;
  }
  // @@protoc_insertion_point(field_mutable:kv.proto.get_response.req)
  return req_;
}
inline ::kv::proto::data* get_response::release_req() {
  // @@protoc_insertion_point(field_release:kv.proto.get_response.req)
  clear_has_req();
  ::kv::proto::data* temp = req_;
  req_ = NULL;
  return temp;
}
inline void get_response::set_allocated_req(::kv::proto::data* req) {
  delete req_;
  req_ = req;
  if (req) {
    set_has_req();
  } else {
    clear_has_req();
  }
  // @@protoc_insertion_point(field_set_allocated:kv.proto.get_response.req)
}

// -------------------------------------------------------------------

// req_envelope

// required .kv.proto.req_envelope.msg_type type = 1;
inline bool req_envelope::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void req_envelope::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void req_envelope::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void req_envelope::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::kv::proto::req_envelope_msg_type req_envelope::type() const {
  // @@protoc_insertion_point(field_get:kv.proto.req_envelope.type)
  return static_cast< ::kv::proto::req_envelope_msg_type >(type_);
}
inline void req_envelope::set_type(::kv::proto::req_envelope_msg_type value) {
  assert(::kv::proto::req_envelope_msg_type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:kv.proto.req_envelope.type)
}

// optional .kv.proto.set_request set_req = 2;
inline bool req_envelope::has_set_req() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void req_envelope::set_has_set_req() {
  _has_bits_[0] |= 0x00000002u;
}
inline void req_envelope::clear_has_set_req() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void req_envelope::clear_set_req() {
  if (set_req_ != NULL) set_req_->::kv::proto::set_request::Clear();
  clear_has_set_req();
}
inline const ::kv::proto::set_request& req_envelope::set_req() const {
  // @@protoc_insertion_point(field_get:kv.proto.req_envelope.set_req)
  return set_req_ != NULL ? *set_req_ : *default_instance_->set_req_;
}
inline ::kv::proto::set_request* req_envelope::mutable_set_req() {
  set_has_set_req();
  if (set_req_ == NULL) {
    set_req_ = new ::kv::proto::set_request;
  }
  // @@protoc_insertion_point(field_mutable:kv.proto.req_envelope.set_req)
  return set_req_;
}
inline ::kv::proto::set_request* req_envelope::release_set_req() {
  // @@protoc_insertion_point(field_release:kv.proto.req_envelope.set_req)
  clear_has_set_req();
  ::kv::proto::set_request* temp = set_req_;
  set_req_ = NULL;
  return temp;
}
inline void req_envelope::set_allocated_set_req(::kv::proto::set_request* set_req) {
  delete set_req_;
  set_req_ = set_req;
  if (set_req) {
    set_has_set_req();
  } else {
    clear_has_set_req();
  }
  // @@protoc_insertion_point(field_set_allocated:kv.proto.req_envelope.set_req)
}

// optional .kv.proto.set_response set_resp = 3;
inline bool req_envelope::has_set_resp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void req_envelope::set_has_set_resp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void req_envelope::clear_has_set_resp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void req_envelope::clear_set_resp() {
  if (set_resp_ != NULL) set_resp_->::kv::proto::set_response::Clear();
  clear_has_set_resp();
}
inline const ::kv::proto::set_response& req_envelope::set_resp() const {
  // @@protoc_insertion_point(field_get:kv.proto.req_envelope.set_resp)
  return set_resp_ != NULL ? *set_resp_ : *default_instance_->set_resp_;
}
inline ::kv::proto::set_response* req_envelope::mutable_set_resp() {
  set_has_set_resp();
  if (set_resp_ == NULL) {
    set_resp_ = new ::kv::proto::set_response;
  }
  // @@protoc_insertion_point(field_mutable:kv.proto.req_envelope.set_resp)
  return set_resp_;
}
inline ::kv::proto::set_response* req_envelope::release_set_resp() {
  // @@protoc_insertion_point(field_release:kv.proto.req_envelope.set_resp)
  clear_has_set_resp();
  ::kv::proto::set_response* temp = set_resp_;
  set_resp_ = NULL;
  return temp;
}
inline void req_envelope::set_allocated_set_resp(::kv::proto::set_response* set_resp) {
  delete set_resp_;
  set_resp_ = set_resp;
  if (set_resp) {
    set_has_set_resp();
  } else {
    clear_has_set_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:kv.proto.req_envelope.set_resp)
}

// optional .kv.proto.get_request get_req = 4;
inline bool req_envelope::has_get_req() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void req_envelope::set_has_get_req() {
  _has_bits_[0] |= 0x00000008u;
}
inline void req_envelope::clear_has_get_req() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void req_envelope::clear_get_req() {
  if (get_req_ != NULL) get_req_->::kv::proto::get_request::Clear();
  clear_has_get_req();
}
inline const ::kv::proto::get_request& req_envelope::get_req() const {
  // @@protoc_insertion_point(field_get:kv.proto.req_envelope.get_req)
  return get_req_ != NULL ? *get_req_ : *default_instance_->get_req_;
}
inline ::kv::proto::get_request* req_envelope::mutable_get_req() {
  set_has_get_req();
  if (get_req_ == NULL) {
    get_req_ = new ::kv::proto::get_request;
  }
  // @@protoc_insertion_point(field_mutable:kv.proto.req_envelope.get_req)
  return get_req_;
}
inline ::kv::proto::get_request* req_envelope::release_get_req() {
  // @@protoc_insertion_point(field_release:kv.proto.req_envelope.get_req)
  clear_has_get_req();
  ::kv::proto::get_request* temp = get_req_;
  get_req_ = NULL;
  return temp;
}
inline void req_envelope::set_allocated_get_req(::kv::proto::get_request* get_req) {
  delete get_req_;
  get_req_ = get_req;
  if (get_req) {
    set_has_get_req();
  } else {
    clear_has_get_req();
  }
  // @@protoc_insertion_point(field_set_allocated:kv.proto.req_envelope.get_req)
}

// optional .kv.proto.get_response get_resp = 5;
inline bool req_envelope::has_get_resp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void req_envelope::set_has_get_resp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void req_envelope::clear_has_get_resp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void req_envelope::clear_get_resp() {
  if (get_resp_ != NULL) get_resp_->::kv::proto::get_response::Clear();
  clear_has_get_resp();
}
inline const ::kv::proto::get_response& req_envelope::get_resp() const {
  // @@protoc_insertion_point(field_get:kv.proto.req_envelope.get_resp)
  return get_resp_ != NULL ? *get_resp_ : *default_instance_->get_resp_;
}
inline ::kv::proto::get_response* req_envelope::mutable_get_resp() {
  set_has_get_resp();
  if (get_resp_ == NULL) {
    get_resp_ = new ::kv::proto::get_response;
  }
  // @@protoc_insertion_point(field_mutable:kv.proto.req_envelope.get_resp)
  return get_resp_;
}
inline ::kv::proto::get_response* req_envelope::release_get_resp() {
  // @@protoc_insertion_point(field_release:kv.proto.req_envelope.get_resp)
  clear_has_get_resp();
  ::kv::proto::get_response* temp = get_resp_;
  get_resp_ = NULL;
  return temp;
}
inline void req_envelope::set_allocated_get_resp(::kv::proto::get_response* get_resp) {
  delete get_resp_;
  get_resp_ = get_resp;
  if (get_resp) {
    set_has_get_resp();
  } else {
    clear_has_get_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:kv.proto.req_envelope.get_resp)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace kv

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::kv::proto::set_response_error_t> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kv::proto::set_response_error_t>() {
  return ::kv::proto::set_response_error_t_descriptor();
}
template <> struct is_proto_enum< ::kv::proto::get_response_error_t> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kv::proto::get_response_error_t>() {
  return ::kv::proto::get_response_error_t_descriptor();
}
template <> struct is_proto_enum< ::kv::proto::req_envelope_msg_type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kv::proto::req_envelope_msg_type>() {
  return ::kv::proto::req_envelope_msg_type_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_kv_2eproto_2eproto__INCLUDED
